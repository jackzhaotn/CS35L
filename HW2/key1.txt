Jack Zhao
405-377-811

Homework: Learning to use Emacs

Exercise 1.1
1. emacs
2. C-s H T M L Enter
3. C-s s c a v e n g e r M-b
4. C-s s e l f M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. No
9. No
10. C-x C-c

Exercise 1.2
1. emacs
2. M-g g 1 9 Enter C-k
3. C-s D E C-a C-k
4. C-s h t t p s : / / e n C-s M-h C-w
5. C-s < ! C-b C-b M-z >
   C-s < ! C-a C-k C-k C-k C-k C-k C-k C-k
   C-s < ! C-a C-k

Excercise 1.3
1. emacs
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter SP SP Enter
3. M-% U F T - 8 Enter U S - A S C I I SP
4. M-< C-M-s [ ^ [ :  a s c i i : ]  ] C-a C-k
5. M-< C-s < / o  l  >  C-o

Exercise 1.4
1. cat
2. emacs
3. M-> C-r < ! Enter C-e M-w C-r < / h t m l  > C-r C-n C-y Enter
4. M-> C-r < ! C-r C-r C-a C-f C-SP M-e M-e M-e C-p M-w C-r s h o u l d C-r C-n C-y C-a C-d C-p C-d C-p C-d C-p C-d C-p C-p  C-k Delete
   M-> C-r < ! C-r C-r C-r Enter C-SP M-e C-n M-w C-r < h 2 > S u b m i t C-r C-n Enter C-y Enter C-p Delete C-p C-d
   M->  C-r < ! C-r C-r C-r C-r Enter C-SP C-e M-w C-r < h 2 > H o m e w o r k C-u C-n C-y
   M-> C-r < ! C-r C-r C-r C-r C-r Enter C-SP C-e M-w C-r < h 2 > L a b C-r C-n C-n C-y
5. C-s - - - SP C-a C-SP M-> C-w
6. C-x u
7. - - > C-r - - - SP C-a < ! - - Enter M-% - - > Enter - - > < ! - - Enter Sp SP SP SP SP SP
8. M-< M-% < o l > Enter < o L > Enter SP SP SP SP SP SP SP (7 times)
9. diff

Exercise 1.5
1. M-x m - d i r Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter (Copy-paste code into file)
3. M-x c o m p i l e Enter M-0 C-k g c c h e l l o . c SP - o SP h e l l o Enter y
4. C-x b h e l l o - o u t Enter C-u M-! .  /  h e l l o Enter
5. C-SP M-> M-w C-x C-f M-0 C-k ~ / C S 3 5 L / H W 1 / k e y 1 . t x t Enter M -> C-y
   EOF on input

Exercise  1.6
1. C-x b Enter
2. m o s t - n e g a t i v e - f i x n u m C-j [-2305843009213693952]
   m o s t - p o s i t i v e - f i x n u m C-j [2305843009213693951]
   C-p C-p C-p ( f o r m a t SP " % x " SP C-e ) C-M-x [hex: 2000000000000000]
   C-n C-n C-a ( f o r m a t SP " % x " SP C-e ) C-M-x [hex: 1fffffffffffffff]
   most-negative-fixnum is the negative limit for any int, a greater negative value will cause overflow
   most-positive-fixnum is the positive limit for any int, a greater positive value will cause overflow
3. M-> ( r a n d o m SP " 4 0 5 - 3 7 7 - 8 1 1 " ) C-j  [1017839190479572930]
4. M-> ( s e t q SP x SP ( r a n d o m ) ) C-j [-132387247275431680]
   M-> ( s e t q SP y SP ( r a n d o m ) ) C-j [-838347892043706609]
5. ( s e t q SP p SP ( * SP x SP y ) ) C-j  [2244530095957894912]
   ( s e t q SP r SP ( l o g a n d SP p SP m o s t - p o s i t i v e - f i x n u m ) C-j [2244530095957894912]
6. R is not the correct mathematical answer
7. x and y are not truly random integers, rather pseudo-random. "Pseudo-random numbers are generated from a seed value. Starting from, any given seed, the rando function always generates the same sequence of numbers. By default, Emacs initializes the random seed at startup, in such a way that the sequence of value of' random' (with overwhelming likelihood) differs in each Emacs run." -emacs manual. This means that every "random" value is predetermined from a seed  when emacs is initialized; thus, the values are not truely mathematically random.
8. For 'r' to be the mathematically correct product of the two integers, the mathematical product has to be within the bounds of most-negative-fixnum to most-positive-fixnum (xy has to produce a value that doesn't cause overflow). Given those values found in #2, the bounds are -2^61 to 2^61 -1. Thus, -2^61 < xy < 2^61 -1. Because bounds are basically symmetric, the probability of overflow is the same for both the positive and negative limits, meaning that we can consider the overflow probability of just the positive side.
   Under this assumption, we have 3 cases:
   	 A: (x < 2^30.5 && y < 2^30.5)
	 B: (x < 2^30.5 || y < 2^30.5) (not necessarily || operator, but represents that one value is less than 2^30.5 while the other is greater than)
	 C: ~A
   Case A will always produce a mathematically correct answer while Case B will always cause overflow and thus a wrong answer. Case B will sometimes produce a mathematically correct answer. The scenario in which Case B produces a correct product is when logbase2(x) + logbase2(y) < 61 -- lets call this scenario Case D.
   Thus, the probability that r is the mathematically correct product is P(A) + P(D).
